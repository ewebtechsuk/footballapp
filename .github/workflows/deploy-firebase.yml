name: Deploy to Firebase Hosting

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: football-app/package-lock.json

      - name: Install Expo workspace dependencies
        working-directory: football-app/football-app-expo
        run: npm install

      - name: Install dependencies
        working-directory: football-app
        run: npm install

      - name: Run tests
        working-directory: football-app
        run: npm test

      - name: Export web bundle for hosting
        working-directory: football-app
        run: npm run deploy:web

      - name: Configure Firebase credentials
        id: firebase-credentials
        run: |
          set -euo pipefail

          credentials_path="${RUNNER_TEMP}/firebase-service-account.json"
          service_account_raw='${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}'
          service_account_b64='${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}'
          deploy_token='${{ secrets.FIREBASE_DEPLOY_TOKEN }}'

          if [ -n "${service_account_raw}" ] || [ -n "${service_account_b64}" ]; then
            export CREDENTIALS_PATH="${credentials_path}"
            export FIREBASE_SERVICE_ACCOUNT_KEY_RAW="${service_account_raw}"
            export FIREBASE_SERVICE_ACCOUNT_KEY_BASE64="${service_account_b64}"

            if ! node - <<'NODE'; then
              exit 1
            fi

const fs = require('fs');

const path = process.env.CREDENTIALS_PATH;
const raw = process.env.FIREBASE_SERVICE_ACCOUNT_KEY_RAW || '';
const b64 = process.env.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 || '';

let content = raw.trim();

if (!content) {
  const normalised = b64.replace(/\s+/g, '');

  if (!normalised) {
    console.log('::error::Firebase service account secret is empty. Provide FIREBASE_SERVICE_ACCOUNT_KEY or FIREBASE_SERVICE_ACCOUNT_KEY_BASE64.');
    process.exit(1);
  }

  if (!/^[A-Za-z0-9+/=_-]+$/.test(normalised)) {
    console.log('::error::FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 is not valid base64 data.');
    process.exit(1);
  }

  try {
    let decodeSource = normalised.replace(/-/g, '+').replace(/_/g, '/');
    if (decodeSource.length % 4 !== 0) {
      decodeSource = decodeSource.padEnd(decodeSource.length + (4 - (decodeSource.length % 4)), '=');
    }

    const decoded = Buffer.from(decodeSource, 'base64');
    const reencoded = decoded.toString('base64').replace(/=+$/, '');
    const expected = decodeSource.replace(/=+$/, '');

    if (!decoded.length || reencoded !== expected) {
      throw new Error('Decoded content is empty or corrupted.');
    }

    content = decoded.toString('utf8');
  } catch (error) {
    console.log(`::error::Failed to decode FIREBASE_SERVICE_ACCOUNT_KEY_BASE64: ${error.message}`);
    process.exit(1);
  }
}

const trimmed = content.trim();

if (!trimmed) {
  console.log('::error::Firebase service account key is empty after decoding.');
  process.exit(1);
}

try {
  JSON.parse(trimmed);
} catch (error) {
  console.log(`::error::Firebase service account key is not valid JSON: ${error.message}`);
  process.exit(1);
}

fs.writeFileSync(path, trimmed, { encoding: 'utf8', mode: 0o600 });
NODE

            echo "GOOGLE_APPLICATION_CREDENTIALS=${credentials_path}" >> "$GITHUB_ENV"
            echo "credentials_path=${credentials_path}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ -n "${deploy_token}" ]; then
            echo "deploy_token=${deploy_token}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo '::error::Configure FIREBASE_SERVICE_ACCOUNT_KEY (preferred), FIREBASE_SERVICE_ACCOUNT_KEY_BASE64, or FIREBASE_DEPLOY_TOKEN so the deploy step can authenticate.'
          exit 1

      - name: Deploy to Firebase Hosting
        working-directory: football-app
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.firebase-credentials.outputs.credentials_path }}
          FIREBASE_DEPLOY_TOKEN: ${{ steps.firebase-credentials.outputs.deploy_token }}
        run: |
          set -euo pipefail
          npm install --global firebase-tools

          if [ -n "${FIREBASE_DEPLOY_TOKEN:-}" ]; then
            firebase deploy --only hosting --token "${FIREBASE_DEPLOY_TOKEN}"
          else
            firebase deploy --only hosting
          fi
